#!/bin/env icon
############################################################################
#
# File: pingstat.icn
#
# Subject: pingstat.icn - compute statistics for unix ping output
#
# Author: Arthur Eschenlauer (https://orcid.org/0000-0002-2882-0508)
#
# Date: 21 August, 2022
#
# URL: https://gist.github.com/eschen42/8330d990da56be172a8b7a74620452ca
#
############################################################################
#
# This file is in the public domain. Art Eschenlauer has waived all
# copyright and related or neighboring rights to:
#   pingstat.icn - compute statistics for unix ping output
# For details, see:
#   https://creativecommons.org/publicdomain/zero/1.0/
#
# If you require a specific license and public domain status is not suffi-
# cient for your needs, please substitute the MIT license (see below), bearing
# in mind that the copyright "claim" is solely to meet your requirements
# and does not imply any restriction on use or copying by the author:
#
#   Copyright (c) 2022, Arthur Eschenlauer
#
#   Permission is hereby granted, free of charge, to any person obtaining
#   a copy of this software and associated documentation files (the
#   "Software"), to deal in the Software without restriction, including
#   without limitation the rights to use, copy, modify, merge, publish,
#   distribute, sublicense, and/or sell copies of the Software, and to
#   permit persons to whom the Software is furnished to do so, subject
#   to the following conditions:
#
#   The above copyright notice and this permission notice shall be
#   included in all copies or substantial portions of the Software.
#
#   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
#   EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
#   MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
#   NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
#   BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
#   ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
#   CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
#   SOFTWARE.
#
############################################################################
#
#  This program parses the output of the unix ping command to compile
#  statistics (mean, max, min, std dev, and std err) for ping times.
#
############################################################################
#
# Requires: none
#
############################################################################
#
# Links: xcode # use xcode rather than xcodes to preserve record type-names
# Includes: runningStats.icn, from https://github.com/eschen42/aceincl
#
############################################################################

link xcode

#$define USEXIMAGE
$ifdef USEXIMAGE
link ximage
$endif

$include "runningStats.icn"
# record welford_running(count, mean, M2)
#   record accumulating online results without persisting raw data
#
# record welford_cumulative(n, mean, variance, sampleVariance, SD, SE)
#   record of statistical results extracted from welford_running
# 
# procedure welford_new()
#   produce an initialized welford_running record
# 
# procedure welford_add(W, x)
#   produce an updated welford_running record
#     - W a welford_running record
#     - x the next value to add to the record
# 
# procedure welford_get(welford_running)
#   produce welford_cumulative record summarizing normal statistics
#   for the series of x provided to welford_add
#     - welford_running a welford_running record updated by welford_add

record proportion(successes, trials)
record range(min, max)

$define PERSIST "log/pingstat_welford.txt"
$define TIME " time="
$define TRANSMITTED " packets transmitted, "
$define RECEIVED " packets received, "
$define LOST "% packet loss"
#$define TIME " Ping: "
#4 packets transmitted, 4 packets received, 0.0% packet loss
procedure xmit_recv(line, T_persist)
  local p, r, x, W_pctlost, prplost
  W_pctlost := T_persist["pctlost"]
  prplost := T_persist["prplost"] | stop("prplost not initialized")
  line ? {
    if  ( x := tab(many(&digits))
        , tab(match(TRANSMITTED))
        , r := tab(many(&digits))
        , tab(match(RECEIVED))
        , p := tab(many(&digits ++ '.'))
        , tab(match(LOST))
        , pos(0)
        )
      then {
        prplost.successes +:= r
        prplost.trials +:= x
        welford_add(W_pctlost, real(p))
        return
        }
    }
end

procedure persist(T_persist)
  local f
  local W_ping
  local W_jitter
  local W_pctlost
  local prplost, jitter_minmax, ping_minmax
  local rw
  rw := if /T_persist then "r" else "w"
  case rw of {
    "r" : {
      T_persist := table()
      if f := open(PERSIST, "r")
        then {
          T_persist := xdecode(f)
          W_ping := T_persist["ping"]
          W_jitter := T_persist["jitter"]
          W_pctlost := T_persist["pctlost"]
          prplost := \T_persist["prplost"] | proportion(0, 0)
          jitter_minmax := \T_persist["jitter_minmax"] | range(10000, 0)
          ping_minmax := \T_persist["ping_minmax"] | range(10000, 0)
          close(f)
          }
      /T_persist := table()
      /T_persist["ping"] := \W_ping | welford_new() # get initialized welford_running
      /T_persist["jitter"] := \W_jitter | welford_new() # ditto
      /T_persist["pctlost"] := \W_pctlost | welford_new() # ditto
      /T_persist["prplost"] := \prplost | proportion(0, 0)
      /T_persist["jitter_minmax"] := \jitter_minmax | range(10000, 0)
      /T_persist["ping_minmax"] := \ping_minmax | range(10000, 0)
      }
    "w" : {
      \T_persist | stop("persist: no T_persist supplied for writing")
      if f := open(PERSIST, "w")
        then {
          xencode(T_persist, f)
          close(f)
          }
      }
    default : {
      stop("persist: bad rw argument = '", image(rw), "'")
      }
    }
  return T_persist
end

procedure main(args)
  local time_prefix
  local line
  local T_persist
  #ACE local f
  local W_ping, stat_ping
  local W_jitter, stat_jitter
  local W_pctlost, stat_pctlost
  local prplost, jitter_minmax, ping_minmax
  local x, x_minus_1
  local j

  time_prefix := \args[1] | TIME

  # get data from previous run
  T_persist := persist()
  W_ping := T_persist["ping"]
  W_jitter := T_persist["jitter"]
  W_pctlost := T_persist["pctlost"]
  prplost := T_persist["prplost"]
  jitter_minmax := T_persist["jitter_minmax"]
  ping_minmax := T_persist["ping_minmax"]

  $ifdef USEXIMAGE
  write(ximage(T_persist))
  $endif

  #&trace := -1
  while line := read() do line ? {
    write(line)
    if xmit_recv(line, T_persist)
      then next
    tab(find(time_prefix)) | next
    move(*time_prefix)
    x   := tab(find(" ms")) | next
    ping_minmax.min >:= x
    ping_minmax.max <:= x
    welford_add(W_ping, x)
    if \x_minus_1
      then{
        j := abs(x - x_minus_1)
        jitter_minmax.min >:= j
        jitter_minmax.max <:= j
        welford_add(W_jitter, j)
        }
    x_minus_1 := x
    }

  # record welford_cumulative(n, mean, variance, sampleVariance, SD, SE)
  stat_ping := welford_get(W_ping)
  stat_jitter := welford_get(W_jitter)
  stat_pctlost := welford_get(W_pctlost)
  T_persist["stat_ping"] := stat_ping 
  T_persist["stat_jitter"] := stat_jitter 
  T_persist["stat_pctlost"] := stat_pctlost 

  write("---")
  write("Statistics for ping (milliseconds)")
  write("  ping min = ", ping_minmax.min, "; ping max = ", ping_minmax.max,
    ";\n  ping mean = ", stat_ping.mean,
    "; se = ", stat_ping.SE, "; sd = ", stat_ping.SD, "; n = ",stat_ping.n)
  write("...")
  write("---")
  write("Statistics for absolute value of jitter (milliseconds)")
  write("  jitter min = ", jitter_minmax.min,
    "; jitter max = ", jitter_minmax.max,
    ";\n  jitter mean = ", stat_jitter.mean,
    "; se = ", stat_jitter.SE,
    "; sd = ", stat_jitter.SD,
    "; n = ",stat_jitter.n
    )
  write("...")
  write("---")
  write("Statistics for packet-receipt (percent)")
  write("  Percent Lost mean = ", stat_pctlost.mean,
    "; se = ", stat_pctlost.SE, "; sd = ", stat_pctlost.SD,
    "; n = ",stat_pctlost.n)
  write("  Total packets lost = ", prplost.trials - prplost.successes,
    ", out of ", prplost.trials, " packets transmitted.")
  write("...")

  # save the data for the next run
  persist(T_persist)
end
